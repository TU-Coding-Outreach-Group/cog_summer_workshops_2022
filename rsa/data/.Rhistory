coreac_diff_rep_hpcffa <- coreac_diff_rep[,c(1:7,11,14:15)]
coreac_diff_rep_hpcffa$ROI <- "HPC_FFA"
names(coreac_diff_rep_ffa)[9:10] <- c("Rep1_Rep2","Rep3_Rep4") # meaning difference between those
names(coreac_diff_rep_hpcffa)[9:10] <- c("Rep1_Rep2","Rep3_Rep4") # meaning difference between those
coreac_diff_rep_ffa <- coreac_diff_rep_ffa[,c(1:8,11,9:10)]
coreac_diff_rep_hpcffa <- coreac_diff_rep_hpcffa[,c(1:8,11,9:10)]
coreac_diff_rep2 <- rbind(coreac_diff_rep_ffa, coreac_diff_rep_hpcffa)
View(coreac_diff_rep2)
coreac_diff_rep_long <- pivot_longer(coreac_diff_rep2,
cols = Rep1_Rep2:Rep3_Rep4,
names_to = "RepetitionPairs",
names_prefix = "CoreacCountDiff",
values_to = "CoreacCountDiff")
coreac_diff_rep_long <- coreac_diff_rep_long[order(coreac_diff_rep_long$subID, coreac_diff_rep_long$Task, coreac_diff_rep_long$Events,
coreac_diff_rep_long$RepetitionPairs, coreac_diff_rep_long$ROI),] #reorder
view(coreac_diff_rep_long)
View(coreac_diff_rep_long)
# merge the coreactivation data for each repetition with its similarity
acrossreps_encrsm_coreaccount <- merge(coreac_diff_rep,rsm_reps2[,c(1,5:8,10:49)],by=c("subID","Task","Events","RepetitionPairs"))
colnames(rsm_reps2[,c(1,5:8)])
coreac_diff_rep <-data.frame(cbind(data32_pe_rep1[1:11],ffa_l_r_coreac_rep21diff,ffa_l_r_coreac_rep43diff,hpc_ffa_coreac_rep21diff,hpc_ffa_coreac_rep43diff))
# it's enough to choose one of the ROI/Hrmisphere combinations because they are irrelevant
coreac_diff_rep <- subset(coreac_diff_rep, ROI=="FFA" & Hemisphere=="R")
coreac_diff_rep_ffa <- coreac_diff_rep[,c(1:7,11:13)]
coreac_diff_rep_ffa$ROIPair <- "FFA_L_R"
names(coreac_diff_rep_ffa)[9:10] <- c("Rep1_Rep2","Rep3_Rep4") # meaning difference between those
coreac_diff_rep_ffa <- coreac_diff_rep_ffa[,c(1:8,11,9:10)]
coreac_diff_rep_hpcffa <- coreac_diff_rep[,c(1:7,11,14:15)]
coreac_diff_rep_hpcffa$ROIPair <- "HPC_FFA"
names(coreac_diff_rep_hpcffa)[9:10] <- c("Rep1_Rep2","Rep3_Rep4") # meaning difference between those
coreac_diff_rep_hpcffa <- coreac_diff_rep_hpcffa[,c(1:8,11,9:10)]
coreac_diff_rep2 <- rbind(coreac_diff_rep_ffa, coreac_diff_rep_hpcffa)
coreac_diff_rep_long <- pivot_longer(coreac_diff_rep2,
cols = Rep1_Rep2:Rep3_Rep4,
names_to = "RepetitionPairs",
names_prefix = "CoreacCountDiff",
values_to = "CoreacCountDiff")
coreac_diff_rep_long <- coreac_diff_rep_long[order(coreac_diff_rep_long$subID, coreac_diff_rep_long$Task, coreac_diff_rep_long$Events,
coreac_diff_rep_long$RepetitionPairs, coreac_diff_rep_long$ROI),] #reorder
coreac_diff_rep_long <- coreac_diff_rep_long[order(coreac_diff_rep_long$subID, coreac_diff_rep_long$Task, coreac_diff_rep_long$Events,
coreac_diff_rep_long$RepetitionPairs, coreac_diff_rep_long$ROIPair),] #reorder
View(coreac_diff_rep_ffa)
coreac_diff_rep_ffa <- pivot_longer(coreac_diff_rep_ffa,
cols = Rep1_Rep2:Rep3_Rep4,
names_to = "RepetitionPairs",
names_prefix = "CoreacCountDiff",
values_to = "CoreacCountDiff")
coreac_diff_rep_ffa <- coreac_diff_rep[,c(1:7,11:13)]
coreac_diff_rep_ffa$ROIPair <- "FFA_L_R"
names(coreac_diff_rep_ffa)[9:10] <- c("Rep1_Rep2","Rep3_Rep4") # meaning difference between those
coreac_diff_rep_ffa <- coreac_diff_rep_ffa[,c(1:8,11,9:10)]
coreac_diff_rep_hpcffa <- coreac_diff_rep[,c(1:7,11,14:15)]
coreac_diff_rep_hpcffa$ROIPair <- "HPC_FFA"
names(coreac_diff_rep_hpcffa)[9:10] <- c("Rep1_Rep2","Rep3_Rep4") # meaning difference between those
coreac_diff_rep_hpcffa <- coreac_diff_rep_hpcffa[,c(1:8,11,9:10)]
coreac_diff_rep_ffa <- pivot_longer(coreac_diff_rep_ffa,
cols = Rep1_Rep2:Rep3_Rep4,
names_to = "RepetitionPairs",
names_prefix = "FFA_L_R_CoreacCountDiff",
values_to = "FFA_L_R_CoreacCountDiff")
coreac_diff_rep_hpcffa <- pivot_longer(coreac_diff_rep_hpcffa,
cols = Rep1_Rep2:Rep3_Rep4,
names_to = "RepetitionPairs",
names_prefix = "HPC_FFA_CoreacCountDiff",
values_to = "HPC_FFA_CoreacCountDiff")
View(coreac_diff_rep_hpcffa)
coreac_diff_rep_ffa <- coreac_diff_rep_ffa[order(coreac_diff_rep_ffa$subID, coreac_diff_rep_ffa$Task, coreac_diff_rep_ffa$Events,
coreac_diff_rep_ffa$RepetitionPairs),] #reorder
coreac_diff_rep_hpcffa <- coreac_diff_rep_hpcffa[order(coreac_diff_rep_hpcffa$subID, coreac_diff_rep_hpcffa$Task, coreac_diff_rep_hpcffa$Events,
coreac_diff_rep_hpcffa$RepetitionPairs),] #reorder
rm(coreac_diff_rep2)
coreac_diff_rep2 <- cbind(coreac_diff_rep_ffa[,c(1:8,10:11)], coreac_diff_rep_hpcffa[,c(1:8,10:11)])
View(coreac_diff_rep2)
rm(coreac_diff_rep2)
coreac_diff_rep2 <- cbind(coreac_diff_rep_ffa[,c(1:8,10:11)], coreac_diff_rep_hpcffa[,c(11)])
View(coreac_diff_rep2)
# merge the coreactivation data for each repetition with its similarity
acrossreps_encrsm_coreaccount <- merge(coreac_diff_rep,rsm_reps2[,c(1,5:8,10:49)],by=c("subID","Task","Events","RepetitionPairs"))
# merge the coreactivation data for each repetition with its similarity
acrossreps_encrsm_coreaccount <- merge(coreac_diff_rep2,rsm_reps2[,c(1,5:8,10:49)],by=c("subID","Task","Events","RepetitionPairs"))
View(acrossreps_encrsm_reaccount)
View(acrossreps_encrsm_coreaccount)
colnames(acrossreps_encrsm_coreaccount)
m_hpcffa <- lm(HPC_FFA_CoreacCountDiff ~ Similarity * RepetitionPairs, data= subset(acrossreps_encrsm_coreaccount, ROI=="HPC"))
summary(m_hpcffa) # trending interaction
### 2.1.2. From Encoding Similarity in R FFA ####
m2_hpcffa <- lm(HPC_FFA_CoreacCountDiff ~ Similarity * RepetitionPairs, data= subset(acrossreps_encrsm_coreaccount, ROI=="FFA"))
summary(m2_hpcffa) # ns
## 1.2. HPC - FFA ####
### 1.2.1. From Encoding Similarity in R FFA ####
m2_ffa <- lm(FFA_L_R_CoreacCountDiff ~ Similarity * RepetitionPairs, data= subset(acrossreps_encrsm_coreaccount, ROI=="FFA"))
summary(m2_ffa) # ns
# clear all lists
rm(list=ls())
# Get the data
getwd()
setwd("/Volumes/RnRproject/data/imaging/derivatives/fsl/fsl_reactivation_March22/groups_compiled/")
figurepath = "/Volumes/RnRproject/results/figures/ManuscriptDraft/"
#display options
options(scipen=100)
options(digits=3)
# Load Data ####
# load coreactivation-memory data
# this is coming from the dataOrganization_CoReactivation_Memory_32trials.R script
df <- read.csv("ItemLevelCoReactivation_AllMemory_32Trials.csv", header = TRUE)
df_scene <- subset(df, Task=="scene" & Rest!="postfacerest")
data32 <- rbind(df_face, df_scene)
data32$Rest[data32$Rest=="postfacerest" | data32$Rest=="postscenerest"] <- "postencodingrest"
# extract
df_face <- subset(df, Task=="face" & Rest!="postscenerest")
df_scene <- subset(df, Task=="scene" & Rest!="postfacerest")
data32 <- rbind(df_face, df_scene)
data32$Rest[data32$Rest=="postfacerest" | data32$Rest=="postscenerest"] <- "postencodingrest"
colnames(data32)[13] <- "ReactivationCount"
# recode Recognition Accuracy responses: merge near & far lures into one incorrect category
data32$D1_Recognition_Accuracy[data32$D1_Recognition_Accuracy=="near lure" | data32$D1_Recognition_Accuracy=="far lure"] <- "incorrect"
data32$D2_Recognition_Accuracy[data32$D2_Recognition_Accuracy=="near lure" | data32$D2_Recognition_Accuracy=="far lure"] <- "incorrect"
data32$D8_Recognition_Accuracy[data32$D8_Recognition_Accuracy=="near lure" | data32$D8_Recognition_Accuracy=="far lure"] <- "incorrect"
# recode
data32$Stimulus <- as.factor(data32$Stimulus)
data32$Events <- as.factor(data32$Events)
data32$ROI <- as.factor(data32$ROI)
data32$Hemisphere <- as.factor(data32$Hemisphere)
data32$Repetition <- as.factor(data32$Repetition)
# separately extract postencoding rest & baseline rest
data32_pe=subset(data32,Rest=="postencodingrest")
data32_bsl=subset(data32,Rest=="baselinerest")
# 1. COREACTIVATIONS: ROI COMBINATIONS ####
# For these analyses we need roi combinations (columns hpc_l_r : hpc_ffa_ppa) & memory results
# so subselecting one of the roi/hemisphere rows would be enough -we also don't need baseline rest
# data2 <- subset(data, ROI=="HPC" & Hemisphere=="L" & Rest!="baselinerest")
data32_rep1 <- subset(data32, ROI=="HPC" & Hemisphere=="L" & Repetition =="Rep1")
data32_rep4 <- subset(data32, ROI=="HPC" & Hemisphere=="L" & Repetition =="Rep4")
# first get a comparison of all the ROI combinations to see how many times each combination co-reactivate
data32_rep1_2 <- data32_rep1[,c(1,5,7:8,11,19:25)]
data32_rep1_2  <- pivot_longer(data=data32_rep1_2,
cols = HPC_L_R:HPC_FFA_PPA,
names_to = "ROI",
values_to = "ROI_CoReactivation")
# we need a wider format to test coreactivations of roi pairs at post-encoding to ones at baseline
data32_rep1_3 <- data32_rep1_2  %>% pivot_wider(names_from = c("Rest","ROI"),
names_sep = "_",
values_from = "ROI_CoReactivation")
# now repeat for rep4 data:
data32_rep4_2 <- data32_rep4[,c(1,5,7:8,11,19:25)]
data32_rep4_2  <- pivot_longer(data=data32_rep4_2,
cols = HPC_L_R:HPC_FFA_PPA,
names_to = "ROI",
values_to = "ROI_CoReactivation")
data32_rep4_3 <- data32_rep4_2  %>% pivot_wider(names_from = c("Rest","ROI"),
names_sep = "_",
values_from = "ROI_CoReactivation")
data32_reps14 <- rbind(data32_rep1_2,data32_rep4_2)
# variables for testing
roi_pairs <- unique(data32_rep1_2$ROI) # get the ROI pairs
rest <- c("baselinerest","postencodingrest")
## 1.1. Repetition 1 ####
### 1.1.1. HPC - FFA ####
#### 1.1.1.1. PE vs PRE rest ####
rep1_hpc_ffa_preVpe <- t.test(data32_rep1_3$baselinerest_HPC_FFA, data32_rep1_3$postencodingrest_HPC_FFA, paired=TRUE)
rep1_hpc_ffa_preVpe # p = 0.00002
## 1.2. Repetition 4 ####
### 1.2.1. HPC - FFA ####
#### 1.2.1.1. PE vs PRE rest ####
rep4_hpc_ffa_preVpe <- t.test(data32_rep4_3$baselinerest_HPC_FFA, data32_rep4_3$postencodingrest_HPC_FFA, paired=TRUE)
rep4_hpc_ffa_preVpe # p < 0.0001
## 1.3. Repetition 1 versus 4 ####
# organize rep1
data32_rep1_5 <- data32_rep1_2  %>% pivot_wider(names_from = c("Repetition","ROI"),
names_sep = "_",
values_from = "ROI_CoReactivation")
data32_rep1_5 <- data32_rep1_5[order(data32_rep1_5$subID, data32_rep1_5$Task, data32_rep1_5$Events,data32_rep1_5$Rest),]
# organize rep4
data32_rep4_5 <- data32_rep4_2  %>% pivot_wider(names_from = c("Repetition","ROI"),
names_sep = "_",
values_from = "ROI_CoReactivation")
data32_rep4_5 <- data32_rep4_5[order(data32_rep4_5$subID, data32_rep4_5$Task, data32_rep4_5$Events,data32_rep4_5$Rest),]
#merge rep1/rep4 then separate for PE vs PRE
data32_reps14 <- cbind(data32_rep1_5,data32_rep4_5[5:11])
data32_reps14_pe <- subset(data32_reps14, Rest=="postencodingrest")
data32_reps14_bsl <- subset(data32_reps14, Rest=="baselinerest")
### 1.3.1. at Post-Encoding #####
hpc_ffa_rep1v4_pe <- t.test(data32_reps14_pe$Rep1_HPC_FFA, data32_reps14_pe$Rep4_HPC_FFA, paired=TRUE)
hpc_ffa_rep1v4_pe # p = 0.2
### 1.3.2. at Baseline #####
hpc_ffa_rep1v4_bsl <- t.test(data32_reps14_bsl$Rep1_HPC_FFA, data32_reps14_bsl$Rep4_HPC_FFA, paired=TRUE)
hpc_ffa_rep1v4_bsl # p = 0.2
# 2. COREACTIVATION PREDICTING MEMORY ####
data32$D1_Recall_Response <- as.factor(data32$D1_Recall_Response)
## 2.1. Repetition 1 ####
### 2.1.1. Immediate (D1) Recall Distance ####
rep1 <- lm(D1_Recall_Distance ~ HPC_FFA * Rest, data=subset(data32, Repetition=="Rep1" & ROI=="HPC" & Hemisphere=="L"))
summary(rep1) # all ns
#### 2.1.1.1. Post-Encoding Rest ####
rep1_pe <- lm(D1_Recall_Distance ~ HPC_FFA, data=subset(data32, Repetition=="Rep1" & ROI=="HPC" & Hemisphere=="L" & Rest=="postencodingrest"))
summary(rep1_pe) # ns
#### 2.1.1.2. Baseline Rest ####
rep1_bsl <- lm(D1_Recall_Distance ~ HPC_FFA, data=subset(data32,Repetition=="Rep1" & ROI=="HPC" & Hemisphere=="L" & Rest=="baselinerest"))
summary(rep1_bsl) # ns
### 2.1.2. Immediate (D1) Recall Accuracy ####
rep1_catg <- glm(D1_Recall_Response ~ HPC_FFA * Rest, data=subset(data32, Repetition=="Rep1" & ROI=="HPC" & Hemisphere=="L"), family="binomial")
summary(rep1_catg) # all ns
#### 2.1.2.1. Post-Encoding Rest ####
rep1_catg_pe <- glm(D1_Recall_Response ~ HPC_FFA, data=subset(data32, Repetition=="Rep1" & ROI=="HPC" & Hemisphere=="L" &
Rest=="postencodingrest"), family="binomial")
summary(rep1_catg_pe) # trending
#### 2.1.2.2. Baseline Rest ####
rep1_catg_bsl <- glm(D1_Recall_Response ~ HPC_FFA, data=subset(data32, Repetition=="Rep1" & ROI=="HPC" & Hemisphere=="L" &
Rest=="baselinerest"), family="binomial")
summary(rep1_catg_bsl) # all ns
## 2.2. Repetition 4 ####
### 2.2.1. Immediate (D1) Rcall Distance ####
rep4 <- lm(D1_Recall_Distance ~ HPC_FFA * Rest, data=subset(data32, Repetition=="Rep4" & ROI=="HPC" & Hemisphere=="L"))
summary(rep4) # all ns
#### 2.2.1.1. Post-Encoding Rest ####
rep4_pe <- lm(D1_Recall_Distance ~ HPC_FFA, data=subset(data32, Repetition=="Rep1" & ROI=="HPC" & Hemisphere=="L" & Rest=="postencodingrest"))
summary(rep4_pe) # ns
#### 2.2.1.2. Baseline Rest ####
rep4_bsl <- lm(D1_Recall_Distance ~ HPC_FFA, data=subset(data32,Repetition=="Rep1" & ROI=="HPC" & Hemisphere=="L" & Rest=="baselinerest"))
summary(rep4_bsl) # ns
### 2.2.2. Immediate (D1) Recall Accuracy ####
rep4_catg <- glm(D1_Recall_Response ~ HPC_FFA * Rest, data=subset(data32, Repetition=="Rep4" & ROI=="HPC" & Hemisphere=="L"), family="binomial")
summary(rep4_catg) # all ns
#### 2.2.2.1. Post-Encoding Rest ####
rep4_catg_pe <- glm(D1_Recall_Response ~ HPC_FFA, data=subset(data32, Repetition=="Rep4" & ROI=="HPC" & Hemisphere=="L" &
Rest=="postencodingrest"), family="binomial")
summary(rep4_catg_pe) # ns
#### 2.2.2.2. Baseline Rest ####
rep4_catg_bsl <- glm(D1_Recall_Response ~ HPC_FFA, data=subset(data32, Repetition=="Rep4" & ROI=="HPC" & Hemisphere=="L" &
Rest=="baselinerest"), family="binomial")
summary(rep4_catg_bsl) # all ns
## 2.3. Repetition 1 vs 4 ####
data32_r1_memory <- subset(data32, Repetition=="Rep1")
data32_r4_memory <- subset(data32, Repetition=="Rep4")
data32_r14_memory <- rbind(data32_r1_memory,data32_r4_memory)
data32_r14_memory$Repetition <- as.factor(data32_r14_memory$Repetition)
data32_r1_memory$D1_Recall_Response <- as.factor(data32_r1_memory$D1_Recall_Response)
### 2.3.1. Immediate (D1) Recall Distance ####
#### 2.3.1.1. Post-Encoding Rest
rep1v4_pe <- lm(D1_Recall_Distance ~ HPC_FFA * Repetition, data=subset(data32_r14_memory, ROI=="HPC" & Hemisphere=="L" & Rest=="postencodingrest"))
summary(rep1v4_pe) # all ns
#### 2.3.1.2. Baseline Rest ####
rep1v4_bsl <- lm(D1_Recall_Distance ~ HPC_FFA * Repetition, data=subset(data32_r14_memory, ROI=="HPC" & Hemisphere=="L" & Rest=="baselinerest"))
summary(rep1v4_bsl) # ns
### 2.3.2. Immediate (D1) Recall Accuracy ####
#### 2.3.2.1. Post-Encoding Rest
rep1v4_catg_pe <- glm(D1_Recall_Response ~ HPC_FFA * Repetition, data=subset(data32_r14_memory, ROI=="HPC" & Hemisphere=="L" & Rest=="postencodingrest"), family="binomial")
summary(rep1v4_catg_pe) # interaction significant p = 0.021
simple_slopes(rep1v4_catg_pe)
# plot # ALSO FIND A WAY TO PLOT IT IN THE CATEGORICAL WAY
set_theme(legend.backgroundcol = "transparent", legend.bordercol = "transparent", legend.item.bordercol = "transparent",
legend.item.backcol = "transparent", legend.title.face = "bold", legend.title.size = .8,
legend.item.size = 0.1, legend.inside = TRUE, legend.pos = "top")
grep1v4_catg_pe <- sjPlot::plot_model(rep1v4_catg_pe, type = "eff", terms = c("HPC_FFA", "Repetition"),
axis.title = c("Reactivation Count at PostEncoding Rest", "Predicted Accuracy (in Likelihood)"),
title = "HPC - FFA", legend.title ="D1 Recall")
grep1v4_catg_pe +
# scale_color_brewer(values = c("Correct" = "#FD8D3C", "Incorrect" = "#F16913")) +
geom_smooth(alpha = .15, size = 1.0) + # scale_y_continuous(limits = c(1,1.7)) +
theme(plot.title = element_text(face="bold", size=10),
axis.text.x=element_text(size=7,color="black"), axis.title.x=element_text(size=10, face="bold",color="black"),
axis.text.y=element_text(size=8,color="black"),  axis.title.y=element_text(size=8, face="bold",color="black"),
axis.line = element_line(size = 1, colour = "black"), plot.background = element_rect(fill = "transparent", color = NA),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())
ggsave(path = figurepath, file=paste0("D1RecallAccuracy_by_HPCFFACoReactivationCount_and_RepetitionCollapsedAcrossCats.png"),
width=8, height=6, units="cm")
# clear all lists
rm(list=ls())
# Get the data
getwd()
setwd("/Volumes/RnRproject/data/imaging/derivatives/fsl/fsl_reactivation_March22/groups_compiled/")
figurepath = "/Volumes/RnRproject/results/figures/ManuscriptDraft/"
#display options
options(scipen=100)
options(digits=3)
# MAIN ANALYSES: HPC-FFA COREACTIVATIONS ####
# load the data
data <- read.csv("ItemLevelCoReactivation_AllMemory_8Imgs.csv", header = TRUE)
View(data)
# rename
names(data)[names(data)=="zCountReactivation"] <- "CountReactivation"
# extract
df_face <- subset(data, Stimulus!="avg" & Task=="face" & Rest!="postscenerest")
df_scene <- subset(data, Stimulus!="avg" & Task=="scene" & Rest!="postfacerest")
data <- rbind(df_face, df_scene)
data$Rest[data$Rest=="postfacerest" | data$Rest=="postscenerest"] <- "postencodingrest"
# recode Recognition Accuracy responses: merge near & far lures into one incorrect category
data$D1_Recognition_Accuracy[data$D1_Recognition_Accuracy=="near lure" | data$D1_Recognition_Accuracy=="far lure"] <- "incorrect"
data$D2_Recognition_Accuracy[data$D2_Recognition_Accuracy=="near lure" | data$D2_Recognition_Accuracy=="far lure"] <- "incorrect"
data$D8_Recognition_Accuracy[data$D8_Recognition_Accuracy=="near lure" | data$D8_Recognition_Accuracy=="far lure"] <- "incorrect"
# recode
data$Stimulus <- as.factor(data$Stimulus)
data$Events <- as.factor(data$Events)
data$ROI <- as.factor(data$ROI)
data$Hemisphere <- as.factor(data$Hemisphere)
colnames(data)[18:24] <- c("HPC_L_R","FFA_L_R","PPA_L_R","HPC_FFA","HPC_PPA","FFA_PPA","HPC_FFA_PPA")
# separately extract postencoding rest & baseline rest
coreac_pe <- subset(data, ROI=="HPC" & Hemisphere=="L" & Rest=="postencodingrest")
coreac_bsl <- subset(data, ROI=="HPC" & Hemisphere=="L" & Rest=="baselinerest")
View(data)
# clear all lists
rm(list=ls())
# MAIN ANALYSES: HPC-FFA COREACTIVATIONS ####
# load the data
data <- read.csv("ItemLevelCoReactivation_AllMemory_8Imgs.csv", header = TRUE)
# rename
names(data)[names(data)=="zCountReactivation"] <- "CountReactivation"
# extract
df_face <- subset(data, Stimulus!="avg" & Task=="face" & Rest!="postscenerest")
df_scene <- subset(data, Stimulus!="avg" & Task=="scene" & Rest!="postfacerest")
df_coreac <- rbind(df_face, df_scene)
df_coreac$Rest[df_coreac$Rest=="postfacerest" | df_coreac$Rest=="postscenerest"] <- "postencodingrest"
# recode Recognition Accuracy responses: merge near & far lures into one incorrect category
df_coreac$D1_Recognition_Accuracy[df_coreac$D1_Recognition_Accuracy=="near lure" | df_coreac$D1_Recognition_Accuracy=="far lure"] <- "incorrect"
df_coreac$D2_Recognition_Accuracy[df_coreac$D2_Recognition_Accuracy=="near lure" | df_coreac$D2_Recognition_Accuracy=="far lure"] <- "incorrect"
df_coreac$D8_Recognition_Accuracy[df_coreac$D8_Recognition_Accuracy=="near lure" | df_coreac$D8_Recognition_Accuracy=="far lure"] <- "incorrect"
# recode Recognition Accuracy responses: merge near & far lures into one incorrect category
data$D1_Recognition_Accuracy[data$D1_Recognition_Accuracy=="near lure" | data$D1_Recognition_Accuracy=="far lure"] <- "incorrect"
data$D2_Recognition_Accuracy[data$D2_Recognition_Accuracy=="near lure" | data$D2_Recognition_Accuracy=="far lure"] <- "incorrect"
data$D8_Recognition_Accuracy[data$D8_Recognition_Accuracy=="near lure" | data$D8_Recognition_Accuracy=="far lure"] <- "incorrect"
# extract
df_face <- subset(data, Stimulus!="avg" & Task=="face" & Rest!="postscenerest")
df_scene <- subset(data, Stimulus!="avg" & Task=="scene" & Rest!="postfacerest")
df_coreac <- rbind(df_face, df_scene)
df_coreac$Rest[df_coreac$Rest=="postfacerest" | df_coreac$Rest=="postscenerest"] <- "postencodingrest"
colnames(data)[18:24] <- c("HPC_L_R","FFA_L_R","PPA_L_R","HPC_FFA","HPC_PPA","FFA_PPA","HPC_FFA_PPA")
# clear all lists
rm(list=ls())
# MAIN ANALYSES: HPC-FFA COREACTIVATIONS ####
# load the data
data <- read.csv("ItemLevelCoReactivation_AllMemory_8Imgs.csv", header = TRUE)
# rename
names(data)[names(data)=="zCountReactivation"] <- "CountReactivation"
colnames(data)[18:24] <- c("HPC_L_R","FFA_L_R","PPA_L_R","HPC_FFA","HPC_PPA","FFA_PPA","HPC_FFA_PPA")
# recode Recognition Accuracy responses: merge near & far lures into one incorrect category
data$D1_Recognition_Accuracy[data$D1_Recognition_Accuracy=="near lure" | data$D1_Recognition_Accuracy=="far lure"] <- "incorrect"
data$D2_Recognition_Accuracy[data$D2_Recognition_Accuracy=="near lure" | data$D2_Recognition_Accuracy=="far lure"] <- "incorrect"
data$D8_Recognition_Accuracy[data$D8_Recognition_Accuracy=="near lure" | data$D8_Recognition_Accuracy=="far lure"] <- "incorrect"
# extract
df_face <- subset(data, Stimulus!="avg" & Task=="face" & Rest!="postscenerest")
df_scene <- subset(data, Stimulus!="avg" & Task=="scene" & Rest!="postfacerest")
df_coreac <- rbind(df_face, df_scene)
df_coreac$Rest[df_coreac$Rest=="postfacerest" | df_coreac$Rest=="postscenerest"] <- "postencodingrest"
# recode
df_coreac$Stimulus <- as.factor(df_coreac$Stimulus)
df_coreac$Events <- as.factor(df_coreac$Events)
df_coreac$ROI <- as.factor(df_coreac$ROI)
df_coreac$Hemisphere <- as.factor(df_coreac$Hemisphere)
View(df_coreac)
## 1. COREACTIVATIONS: ROI COMBINATIONS ####
# For these analyses we need roi combinations (columns hpc_l_r : hpc_ffa_ppa) & memory results
# so subselecting one of the roi/hemisphere rows would be enough -we also don't need baseline rest
# df_coreac2 <- subset(df_coreac, ROI=="HPC" & Hemisphere=="L" & Rest!="baselinerest")
df_coreac2 <- subset(df_coreac, ROI=="HPC" & Hemisphere=="L")
colnames(df_coreac2[,c(1,5,7,10,18:24)])
colnames(df_coreac2[,c(1,5,7,10,21)])
# first get a comparison of all the ROI combinations to see how many times
# each combination co-reactivate
df_coreac2 <- df_coreac2[,c(1,5,7,10,21)]
View(df_coreac2)
# we need a wider format to test coreactivations of roi pairs at post-encoding to ones at baseline
df_coreac3 <- df_coreac2 %>% pivot_wider(names_from = c("Rest","HPC_FFA"),
names_sep = "_",
values_from = "HPC_FFA")
View(df_coreac3)
rm(df_coreac3)
df_coreac2$ROIPair <- "HPC_FFA"
colnames(df_coreac2)[5] <- "ROI_CoReactivation"
# we need a wider format to test coreactivations of roi pairs at post-encoding to ones at baseline
df_coreac3 <- df_coreac2 %>% pivot_wider(names_from = c("Rest","ROIPair"),
names_sep = "_",
values_from = "ROI_CoReactivation")
## 1.1. HPC-FFA Coreactivation Count: Pre vs PE Rest ####
hpc_ffa_preVpe <- t.test(df_coreac3$baselinerest_HPC_FFA, df_coreac3$postencodingrest_HPC_FFA, paired=TRUE)
hpc_ffa_preVpe # p = 0.00002
# plot
p <- ggplot(data=subset(df_coreac2), aes(x=Rest,y=ROI_CoReactivation)) +
geom_bar(stat="summary", fun="mean", width=.3, position="dodge") + theme_minimal() +
labs(x="", y="Count of Co-Reactivating TRs", title= "HPC-FFA Coreactivations") +
theme(plot.title = element_text(face = "bold", size = 7), axis.text.y = element_text(size = 7, face ="bold"),
axis.title.y = element_text(size = 8, face = "bold"),
axis.text.x = element_text(size = 7, face ="bold"), axis.line = element_line(size = 1, colour = "black"),
panel.grid = element_blank(), legend.title = element_blank(), legend.position = "top",
legend.text = element_text(size = 7, face = "bold"), aspect.ratio=0.7) + coord_cartesian(ylim=c(0,5))
p
figurepath
figurepath = "/Volumes/RnRproject/results/figures/ManuscriptDraft/"
ggsave(path = figurepath, file=paste0("HPC-FFA_CoReactivationCount_BaselineVsPE_CollapsedAcrossCats.png"),
width=8, height=6, units="cm")
# plot
p <- ggplot(data=subset(df_coreac2), aes(x=Rest,y=ROI_CoReactivation)) +
geom_bar() + theme_minimal() +
labs(x="", y="Count of Co-Reactivating TRs", title= "HPC-FFA Coreactivations") +
theme(plot.title = element_text(face = "bold", size = 7), axis.text.y = element_text(size = 7, face ="bold"),
axis.title.y = element_text(size = 8, face = "bold"),
axis.text.x = element_text(size = 7, face ="bold"), axis.line = element_line(size = 1, colour = "black"),
panel.grid = element_blank(), legend.title = element_blank(), legend.position = "top",
legend.text = element_text(size = 7, face = "bold"), aspect.ratio=0.7) + coord_cartesian(ylim=c(0,5))
p
# plot
p <- ggplot(data=subset(df_coreac2), aes(x=Rest,y=ROI_CoReactivation)) +
geom_bar(stat="summary", fun="mean", width=.3, position="dodge") + theme_minimal() +
labs(x="", y="Mean Count of Co-Reactivating TRs", title= "HPC-FFA Coreactivations") +
theme(plot.title = element_text(face = "bold", size = 7), axis.text.y = element_text(size = 7, face ="bold"),
axis.title.y = element_text(size = 8, face = "bold"),
axis.text.x = element_text(size = 7, face ="bold"), axis.line = element_line(size = 1, colour = "black"),
panel.grid = element_blank(), legend.title = element_blank(), legend.position = "top",
legend.text = element_text(size = 7, face = "bold"), aspect.ratio=0.7) + coord_cartesian(ylim=c(0,5))
p
ggsave(path = figurepath, file=paste0("HPC-FFA_CoReactivationCount_BaselineVsPE_CollapsedAcrossCats.png"),
width=8, height=6, units="cm")
# plot
p <- ggplot(data=subset(df_coreac2), aes(x=Rest,y=ROI_CoReactivation)) +
geom_bar(stat="summary", fun="mean", width=.3, position="dodge") + theme_minimal() +
labs(x="", y="Mean Count of Co-Reactivating TRs", title= "HPC-FFA Coreactivations") +
theme(plot.title = element_text(face = "bold", size = 7), axis.text.y = element_text(size = 7, face ="bold"),
axis.title.y = element_text(size = 7, face = "bold"),
axis.text.x = element_text(size = 7, face ="bold"), axis.line = element_line(size = 1, colour = "black"),
panel.grid = element_blank(), legend.title = element_blank(), legend.position = "top",
legend.text = element_text(size = 7, face = "bold"), aspect.ratio=0.7) + coord_cartesian(ylim=c(0,5))
p
ggsave(path = figurepath, file=paste0("HPC-FFA_CoReactivationCount_BaselineVsPE_CollapsedAcrossCats.png"),
width=8, height=6, units="cm")
getwd()
setwd("/Users/busra/Desktop/aurora/data/stats/MTL_PTSD/ptsd_data/")
setwd("/Users/busra/Desktop/RSA2022/data/")
setwd("/Users/tum99916/Desktop/RSA2022/data/")
#display options
options(scipen=100)
options(digits=6)
# clear all lists
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
###### ORGANIZE THE DATA  ######
#import & clean startle data
s1_ffa <- read.csv('sub-660/ffa_l_5m_allImages_AgainstBaseline.csv')
setwd("/Users/tum99916/Desktop/RSA2022/data/")
getwd
getwd()
s1_ffa <- read.csv('sub-660/ffa_l_5m_allImages_AgainstBaseline.csv')
s1_hpc <- read.csv('sub-660/hipp_r_5m_allImages_AgainstBaseline.csv')
s2_ffa <- read.csv('sub-686/ffa_l_5m_allImages_AgainstBaseline.csv')
s2_hpc <- read.csv('sub-686/hipp_r_5m_allImages_AgainstBaseline.csv')
View(s1_ffa)
View(s1_hpc)
View(s2_ffa)
View(s2_hpc)
###### ORGANIZE THE DATA  ######
subjects <- c("sub-660","sub-686")
s1_ffa_corr <- corr(s1_ffa,s1_ffa)
# Libraries
library('emulator')
install.packages('emulator')
library('emulator')
s1_ffa_corr <- corr(s1_ffa,s1_ffa)
s1_ffa_corr <- corr(s1_ffa,s1_ffa,pos.def.matrix=NULL)
View(s1_ffa)
# For this we will be using the corr function from the emulator package
s1_ffa_corr <- corr.matrix(s1_ffa,s1_ffa)
s1_ffa_corr <- cor(c(s1_ffa),c(s1_ffa))
typeof(s1_ffa)
# For this we will be using the corr function from the emulator package
s1_ffa_corr <- cor(c(s1_ffa),c(s1_ffa),use = "complete.obs")
# For this we will be using the corr function from the emulator package
s1_ffa_corr <- cor(s1_ffa,s1_ffa,use = "complete.obs")
View(s1_ffa)
View(s1_ffa_corr)
s1_ffa_corr2 <- cor(s1_ffa,s1_ffa)
View(s1_ffa_corr2)
s1_ffa_corr2
rm(s1_ffa_corr2)
# clear all lists
rm(list=ls())
###### ORGANIZE THE DATA  ######
subjects <- c("sub-660","sub-686")
rois <- c("HPC","FFA")
#import & clean startle data
s1_ffa <- read.csv('sub-660/ffa_l_5m_allImages_AgainstBaseline.csv')
setwd("/Users/tum99916/Desktop/RSA2022/data/")
#import & clean startle data
s1_ffa <- read.csv('sub-660/ffa_l_5m_allImages_AgainstBaseline.csv')
s1_ffa <- read.csv('sub-660/ffa_l_5m_allImages_AgainstBaseline.csv')
s1_hpc <- read.csv('sub-660/hpc_r_5m_allImages_AgainstBaseline.csv')
s2_ffa <- read.csv('sub-686/ffa_l_5m_allImages_AgainstBaseline.csv')
s2_hpc <- read.csv('sub-686/hpc_r_5m_allImages_AgainstBaseline.csv')
View(s1_ffa)
View(s1_hpc)
View(s2_ffa)
View(s2_hpc)
s1_ffa <- read.csv('sub-660/ffa_l_5m_allImages_AgainstBaseline.csv')
# Get the data
getwd()
setwd("/Users/tum99916/Desktop/RSA2022/data/")
#display options
options(scipen=100)
options(digits=6)
# clear all lists
rm(list=ls())
###### ORGANIZE THE DATA  ######
subjects <- c("sub-660","sub-686")
rois <- c("HPC","FFA")
#import & clean startle data
s1_ffa <- read.csv('sub-660/ffa_l_5m_allImages_AgainstBaseline.csv')
s1_hpc <- read.csv('sub-660/hpc_r_5m_allImages_AgainstBaseline.csv')
s2_ffa <- read.csv('sub-686/ffa_l_5m_allImages_AgainstBaseline.csv')
s2_hpc <- read.csv('sub-686/hpc_r_5m_allImages_AgainstBaseline.csv')
# For this we will be using the corr function from  base R
# here we don't have any NAs but in case your data has, you can specify the function to use only the complete observations
s1_ffa_corr <- cor(s1_ffa, s1_ffa, use = "complete.obs")
View(s1_ffa_corr)
# let's peak into one of these datasets
View(s1_ffa)
